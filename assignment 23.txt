Assignment - 23 Full Stack Web Development using Python MySirG

Iterator, Generator and Decorator

1. Use iter and next method to access all the elements of a given set using while loop
it=iter(iterable)
while True:
    try:
        e=next(it)
    except:
        break

2. Create a generator to produce first n odd natural numbers
def oddgenerator(n):
   x=1
   while n:
       yield x
       x+=2
       n-=1
it=oddgenerator(10)
output:
1
3
5
7
9
11
13
15
17
19

3. Create a generator to produce first n even natural numbers
def oddgenerator(n):
   x=2
   while n:
       yield x
       x+=2
       n-=1
it=oddgenerator(10)
output:
for e in it:
    print(e)

    
2
4
6
8
10
12
14
16
18
20


4. Create a generator to produce squares of first N natural numbers
def oddgenerator(n):
   x=1
   while n:
       yield x**2
       x+=1
       n-=1
it=oddgenerator(10)
output:
for e in it:
    e

    
1
4
9
16
25
36
49
64
81
100

5. Create a generator to produce first n terms of Fibonacci series
def fibo(n):
    a,b=0,1
    while n:
        yield a
        a,b=b,a+b
        n-=1
for e in fibo(10):
    print(e ,end=" ")
output:
0 1 1 2 3 5 8 13 21 34 

6. Create a generator to produce first n prime numbers
def isprime(num):
    for i in range(2,num):
        if num%i==0:
            return False
        
    return True
def prime(n):
    num=2
    while n:
        if isprime(num):
            yield num
            n-=1
        num+=1
    return

it=prime(10)
for e in it:
    print(e,end=" ")
output:
2 3 5 7 11 13 17 19 23 29 

7. Create an endless iterator using generator method to produce terms of Fibonacci
series
def fibo():
    a,b=0,1
    while True:
        yield a
        a,b=b,a+b
        
for e in fibo():
    print(e ,end=" ")

8. Create an endless iterator using generator method to produce Prime numbers
def isprime(num):
    for i in range(2,num):
        if num%i==0:
            return False
        
    return True
def prime():
    num=2
    while True:
        if isprime(num):
            yield num
            
        num+=1
    return

it=prime()
for e in it:
    print(e,end=" ")
output:
9. Define a function which takes lengths of three sides of a triangle as arguments and
display the perimeter or triangle. Define and apply a decorator which checks for the
validity of the triangle on the basis of lengths of the side. This makes the perimeter to
be displayed when the triangle can exist with the given lengths of the sides.
def decor_peri(peri_func):
    def check(a,b,c):
        z=a+b
        if z>c:
            print("invalid tringle")
        elif z<c:
            print("valid triangle")
        else:
            peri_func(a,b,c)
        return check
@decor_peri
def peri(a,b,c):
    perimeter=a+b+c
    print("perimeter of triangle",perimeter)
peri(7,3,15)
output:
valid triangle
perimeter of triangle 25


10. Define a function which calculates HCF of two numbers. Define and apply a
decorator to check whether two given numbers are co-prime or not.